Project File Structure

/ (root directory)
├── index.html
├── style.css
│
├── js/
│   ├── config-data.js
│   ├── config.js
│   ├── debugger.js
│   ├── engine.js
│   ├── analysis-helpers.js
│   ├── ui-elements.js
│   ├── ui-feedback.js
│   ├── ui-interactions.js
│   ├── board.js
│   ├── game.js
│   └── main.js
│
├── analysis/
│   ├── analysis-core.js
│   └── analysis-ui.js
│
├── lib/
│   ├── chart.min.js
│   ├── chess.min.js
│   ├── chessboard-1.0.0.min.css
│   ├── chessboard-1.0.0.min.js
│   ├── gsap.min.js
│   ├── howler.min.js
│   ├── jquery-3.6.0.min.js
│   ├── sweetalert2.min.js
│   └── tailwind.min.css
│
├── icon/
│   ├── (Contains all general UI and classification icons in .png format)
│
├── sounds/
│   ├── capture.mp3
│   ├── castle.mp3
│   ├── game-end.mp3
│   ├── game-start.mp3
│   ├── move-check.mp3
│   ├── move-self.mp3
│   └── promote.mp3
│
└── img/
    └── (Contains all piece image sets)



### AI Development Pillars: Chess Application
This document outlines the non-negotiable rules and constraints for the chess application. All code must strictly adhere to these pillars to ensure quality, stability, and maintainability.

Pillar 1: Code Integrity and Stability
1.1. Error Resilience: The application is fortified with a global error handler (debugger.js) that catches all uncaught exceptions. Errors are handled gracefully without crashing and are reported with detailed stack traces to the on-screen console, ensuring future additions can be debugged effectively.
1.2. Functional Parity: The refactored application is functionally identical to or an improvement upon its original specification. All features, from gameplay mechanics to UI interactions, work as intended.
1.3. No Code Omission: Every function, variable, and logical block from the original source is fully accounted for and correctly migrated to the final modular file structure.

Pillar 2: Project Architecture
2.1. Strict File Structure Adherence: All code is organized into the modular file structure. Each file has a distinct and clear responsibility:
* config-data.js & config.js: Centralize all static data and settings.
* debugger.js & engine.js: Manage low-level error handling and engine communication.
* analysis-helpers.js: Contains centralized, shared logic for move analysis.
* ui-*.js files: Handle all aspects of the user interface.
* board.js, game.js, main.js: Control board interactions, game logic, and application initialization.
* analysis-*.js: Manage the post-game analysis feature.
2.2. Correct Dependency Loading: The index.html file loads all scripts in the correct order to satisfy dependencies, starting with the debugger and configuration files and ending with the main application logic.

Pillar 3: Technical & Operational Constraints
3.1. Serverless Environment: The application runs perfectly when index.html is opened directly in a web browser via the file:/// protocol. This is achieved by:
* Using traditional <script> loading with no ES6 modules (import/export).
* Ensuring all asset paths (img/, sounds/) are relative.
3.2. Online Engine Loading: The Stockfish engine (for AI play, live analysis, hints, and final review) is loaded from a reliable online CDN, not a local file. This ensures it loads reliably without server-related MIME type errors.
3.3. Data Persistence: All user settings (themes, sound preferences, AI difficulty, etc.) are saved to the browser's localStorage and reloaded automatically on subsequent visits.

Pillar 4: Quality and User Experience
4.1. Flawless Chess Logic: All chess rules, including castling, en passant, pawn promotion, stalemate, threefold repetition, and the 50-move rule, are implemented perfectly via the chess.js library.
4.2. Perfect State Synchronization: The visual board is always an exact and immediate representation of the internal game state. There are no "ghost pieces" or desynchronization issues.
4.3. Glitch-Free UI: The user interface is stable and free of flickering, resizing, or graphical artifacts, especially during move animations and window resizing.
4.4. Context-Aware Controls: All buttons and UI controls are intelligently enabled or disabled based on the current game state (e.g., the "Undo" button is disabled at the start of the game; navigation buttons are disabled during the AI's turn).
4.5. Professional-Grade Analysis: The post-game analysis provides a fast and accurate move-by-move review, using a sophisticated classification system and an interactive UI to deliver insightful feedback.
